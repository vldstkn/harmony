// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: room.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Room_CreateRoom_FullMethodName          = "/Room/CreateRoom"
	Room_DeleteRoom_FullMethodName          = "/Room/DeleteRoom"
	Room_AddUsersToRoom_FullMethodName      = "/Room/AddUsersToRoom"
	Room_RemoveUsersFromRoom_FullMethodName = "/Room/RemoveUsersFromRoom"
	Room_GetRoomsByUserId_FullMethodName    = "/Room/GetRoomsByUserId"
	Room_GetRoom_FullMethodName             = "/Room/GetRoom"
	Room_CanSendMessage_FullMethodName      = "/Room/CanSendMessage"
)

// RoomClient is the client API for Room service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomReq, opts ...grpc.CallOption) (*CreateRoomRes, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomReq, opts ...grpc.CallOption) (*DeleteRoomRes, error)
	AddUsersToRoom(ctx context.Context, in *AddUsersToRoomReq, opts ...grpc.CallOption) (*AddUsersToRoomRes, error)
	RemoveUsersFromRoom(ctx context.Context, in *RemoveUsersFromRoomReq, opts ...grpc.CallOption) (*RemoveUsersFromRoomRes, error)
	GetRoomsByUserId(ctx context.Context, in *GetRoomsByUserIdReq, opts ...grpc.CallOption) (*GetRoomsByUserIdRes, error)
	GetRoom(ctx context.Context, in *GetRoomReq, opts ...grpc.CallOption) (*GetRoomRes, error)
	CanSendMessage(ctx context.Context, in *CanSendMessageReq, opts ...grpc.CallOption) (*CanSendMessageRes, error)
}

type roomClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomClient(cc grpc.ClientConnInterface) RoomClient {
	return &roomClient{cc}
}

func (c *roomClient) CreateRoom(ctx context.Context, in *CreateRoomReq, opts ...grpc.CallOption) (*CreateRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoomRes)
	err := c.cc.Invoke(ctx, Room_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) DeleteRoom(ctx context.Context, in *DeleteRoomReq, opts ...grpc.CallOption) (*DeleteRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoomRes)
	err := c.cc.Invoke(ctx, Room_DeleteRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) AddUsersToRoom(ctx context.Context, in *AddUsersToRoomReq, opts ...grpc.CallOption) (*AddUsersToRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUsersToRoomRes)
	err := c.cc.Invoke(ctx, Room_AddUsersToRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) RemoveUsersFromRoom(ctx context.Context, in *RemoveUsersFromRoomReq, opts ...grpc.CallOption) (*RemoveUsersFromRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUsersFromRoomRes)
	err := c.cc.Invoke(ctx, Room_RemoveUsersFromRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) GetRoomsByUserId(ctx context.Context, in *GetRoomsByUserIdReq, opts ...grpc.CallOption) (*GetRoomsByUserIdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomsByUserIdRes)
	err := c.cc.Invoke(ctx, Room_GetRoomsByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) GetRoom(ctx context.Context, in *GetRoomReq, opts ...grpc.CallOption) (*GetRoomRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoomRes)
	err := c.cc.Invoke(ctx, Room_GetRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) CanSendMessage(ctx context.Context, in *CanSendMessageReq, opts ...grpc.CallOption) (*CanSendMessageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CanSendMessageRes)
	err := c.cc.Invoke(ctx, Room_CanSendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServer is the server API for Room service.
// All implementations must embed UnimplementedRoomServer
// for forward compatibility.
type RoomServer interface {
	CreateRoom(context.Context, *CreateRoomReq) (*CreateRoomRes, error)
	DeleteRoom(context.Context, *DeleteRoomReq) (*DeleteRoomRes, error)
	AddUsersToRoom(context.Context, *AddUsersToRoomReq) (*AddUsersToRoomRes, error)
	RemoveUsersFromRoom(context.Context, *RemoveUsersFromRoomReq) (*RemoveUsersFromRoomRes, error)
	GetRoomsByUserId(context.Context, *GetRoomsByUserIdReq) (*GetRoomsByUserIdRes, error)
	GetRoom(context.Context, *GetRoomReq) (*GetRoomRes, error)
	CanSendMessage(context.Context, *CanSendMessageReq) (*CanSendMessageRes, error)
	mustEmbedUnimplementedRoomServer()
}

// UnimplementedRoomServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoomServer struct{}

func (UnimplementedRoomServer) CreateRoom(context.Context, *CreateRoomReq) (*CreateRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomServer) DeleteRoom(context.Context, *DeleteRoomReq) (*DeleteRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedRoomServer) AddUsersToRoom(context.Context, *AddUsersToRoomReq) (*AddUsersToRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUsersToRoom not implemented")
}
func (UnimplementedRoomServer) RemoveUsersFromRoom(context.Context, *RemoveUsersFromRoomReq) (*RemoveUsersFromRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUsersFromRoom not implemented")
}
func (UnimplementedRoomServer) GetRoomsByUserId(context.Context, *GetRoomsByUserIdReq) (*GetRoomsByUserIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomsByUserId not implemented")
}
func (UnimplementedRoomServer) GetRoom(context.Context, *GetRoomReq) (*GetRoomRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedRoomServer) CanSendMessage(context.Context, *CanSendMessageReq) (*CanSendMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanSendMessage not implemented")
}
func (UnimplementedRoomServer) mustEmbedUnimplementedRoomServer() {}
func (UnimplementedRoomServer) testEmbeddedByValue()              {}

// UnsafeRoomServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomServer will
// result in compilation errors.
type UnsafeRoomServer interface {
	mustEmbedUnimplementedRoomServer()
}

func RegisterRoomServer(s grpc.ServiceRegistrar, srv RoomServer) {
	// If the following call pancis, it indicates UnimplementedRoomServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Room_ServiceDesc, srv)
}

func _Room_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).CreateRoom(ctx, req.(*CreateRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).DeleteRoom(ctx, req.(*DeleteRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_AddUsersToRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUsersToRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).AddUsersToRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_AddUsersToRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).AddUsersToRoom(ctx, req.(*AddUsersToRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_RemoveUsersFromRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUsersFromRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).RemoveUsersFromRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_RemoveUsersFromRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).RemoveUsersFromRoom(ctx, req.(*RemoveUsersFromRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_GetRoomsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).GetRoomsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_GetRoomsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).GetRoomsByUserId(ctx, req.(*GetRoomsByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_GetRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).GetRoom(ctx, req.(*GetRoomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_CanSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanSendMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).CanSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Room_CanSendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).CanSendMessage(ctx, req.(*CanSendMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Room_ServiceDesc is the grpc.ServiceDesc for Room service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Room_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Room",
	HandlerType: (*RoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _Room_CreateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _Room_DeleteRoom_Handler,
		},
		{
			MethodName: "AddUsersToRoom",
			Handler:    _Room_AddUsersToRoom_Handler,
		},
		{
			MethodName: "RemoveUsersFromRoom",
			Handler:    _Room_RemoveUsersFromRoom_Handler,
		},
		{
			MethodName: "GetRoomsByUserId",
			Handler:    _Room_GetRoomsByUserId_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _Room_GetRoom_Handler,
		},
		{
			MethodName: "CanSendMessage",
			Handler:    _Room_CanSendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "room.proto",
}
